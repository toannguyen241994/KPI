// <auto-generated />
using System;
using Blue.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Blue.Api.Migrations
{
    [DbContext(typeof(BlueDbContext))]
    [Migration("20180707220713_UpdateRoleTableAndSeedData")]
    partial class UpdateRoleTableAndSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Blue.Data.Models.AuditTrail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AudittingLevel");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Data");

                    b.Property<int>("EventType");

                    b.Property<string>("ExternalIpAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SessionId");

                    b.Property<DateTimeOffset>("TimeStamp");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.Property<string>("UrlAccessed");

                    b.Property<int>("UserAction");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("AuditTrail");
                });

            modelBuilder.Entity("Blue.Data.Models.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Icon");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title");

                    b.Property<string>("Translate");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Component");
                });

            modelBuilder.Entity("Blue.Data.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CompanyName");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Facebook");

                    b.Property<string>("Fax");

                    b.Property<string>("Google");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Lat");

                    b.Property<string>("Lng");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Pinterest");

                    b.Property<string>("Twitter");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Blue.Data.Models.IdentityModel.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = new Guid("11111111-1111-1111-1111-111111111111"), Active = true, Code = "SUPERADMIN", ConcurrencyStamp = "b31ff791-edb3-4887-9223-3f1f4b5e1a1d", CreatedBy = "superadmin", CreatedDate = new DateTimeOffset(new DateTime(2018, 7, 8, 5, 7, 12, 567, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), IsDeleted = true, Name = "Super Adminitrator", NormalizedName = "SUPER ADMINISTRATOR", UpdatedBy = "superadmin", UpdatedDate = new DateTimeOffset(new DateTime(2018, 7, 8, 5, 7, 12, 569, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)) },
                        new { Id = new Guid("5a61f008-0ce1-4b60-8c0c-c12c721e475d"), Active = true, Code = "ADMIN", ConcurrencyStamp = "918e3830-be83-43b2-b7bd-c8e3b57f834d", CreatedBy = "superadmin", CreatedDate = new DateTimeOffset(new DateTime(2018, 7, 8, 5, 7, 12, 569, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), IsDeleted = false, Name = "Admin", NormalizedName = "ADMINISTRATOR", UpdatedBy = "superadmin", UpdatedDate = new DateTimeOffset(new DateTime(2018, 7, 8, 5, 7, 12, 569, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)) },
                        new { Id = new Guid("7a749297-4edf-4d16-a769-d3bada83247e"), Active = true, Code = "USER", ConcurrencyStamp = "c6edc7fa-fc91-4f1a-9612-97c3fe75522d", CreatedBy = "superadmin", CreatedDate = new DateTimeOffset(new DateTime(2018, 7, 8, 5, 7, 12, 569, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), IsDeleted = false, Name = "User", NormalizedName = "USER", UpdatedBy = "superadmin", UpdatedDate = new DateTimeOffset(new DateTime(2018, 7, 8, 5, 7, 12, 569, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)) },
                        new { Id = new Guid("61f3dc6e-3863-40e5-ba2b-a6334b5590ac"), Active = true, Code = "EMPMGR", ConcurrencyStamp = "3c8e5a17-52b4-4960-95b6-ee8553b2cf15", CreatedBy = "superadmin", CreatedDate = new DateTimeOffset(new DateTime(2018, 7, 8, 5, 7, 12, 569, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), IsDeleted = false, Name = "Employ Manager", NormalizedName = "EMPLOY MANAGER", UpdatedBy = "superadmin", UpdatedDate = new DateTimeOffset(new DateTime(2018, 7, 8, 5, 7, 12, 569, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)) },
                        new { Id = new Guid("94efbd9d-49f3-48b6-ba6d-57ace0d753f4"), Active = true, Code = "EMPSEC", ConcurrencyStamp = "d8891966-429c-4fc2-8e4b-6836017ecdcb", CreatedBy = "superadmin", CreatedDate = new DateTimeOffset(new DateTime(2018, 7, 8, 5, 7, 12, 569, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), IsDeleted = false, Name = "Employ Secretary", NormalizedName = "EMPLOY SECRETARY", UpdatedBy = "superadmin", UpdatedDate = new DateTimeOffset(new DateTime(2018, 7, 8, 5, 7, 12, 569, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)) }
                    );
                });

            modelBuilder.Entity("Blue.Data.Models.IdentityModel.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Blue.Data.Models.IdentityModel.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLocked");

                    b.Property<string>("LastName");

                    b.Property<DateTimeOffset>("LockedDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<bool>("RememberMe");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("ShouldLockout");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTimeOffset>("UnLockedDate");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = new Guid("53319368-f467-4d49-a1b0-8da303b6c24a"), AccessFailedCount = 0, Active = true, ConcurrencyStamp = "14995032-64f0-4323-924e-7f6e3ab7807b", CreatedBy = "superadmin", CreatedDate = new DateTimeOffset(new DateTime(2018, 7, 8, 5, 7, 12, 571, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), Email = "superadmin@gmail.com", EmailConfirmed = false, FirstName = "Super", IsDeleted = true, IsLocked = false, LastName = "Administrator", LockedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), LockoutEnabled = false, NormalizedEmail = "SUPERADMIN@GMAIL.COM", NormalizedUserName = "SUPERADMIN", PasswordHash = "AQAAAAEAACcQAAAAEFB+UXfZPfZvMWdDDl9SSWPNDoKKBpBASb/CzK/rmWu/OlE15ALyEAY/QKP4jEkRyg==", PhoneNumberConfirmed = false, RememberMe = false, SecurityStamp = "15f0f1f1-9006-4b50-bcb8-848760421641", ShouldLockout = false, TwoFactorEnabled = false, UnLockedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), UpdatedBy = "superadmin", UpdatedDate = new DateTimeOffset(new DateTime(2018, 7, 8, 5, 7, 12, 571, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), UserName = "superadmin" },
                        new { Id = new Guid("55e816d6-34e1-4a1c-9940-4bc5381b21b8"), AccessFailedCount = 0, Active = true, ConcurrencyStamp = "edaea02b-c53b-4ff5-abc7-62063553f851", CreatedBy = "superadmin", CreatedDate = new DateTimeOffset(new DateTime(2018, 7, 8, 5, 7, 12, 571, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), Email = "admin@gmail.com", EmailConfirmed = false, FirstName = "Shop", IsDeleted = false, IsLocked = false, LastName = "Administrator", LockedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), LockoutEnabled = false, NormalizedEmail = "ADMIN@GMAIL.COM", NormalizedUserName = "ADMIN", PasswordHash = "AQAAAAEAACcQAAAAEFB+UXfZPfZvMWdDDl9SSWPNDoKKBpBASb/CzK/rmWu/OlE15ALyEAY/QKP4jEkRyg==", PhoneNumberConfirmed = false, RememberMe = false, SecurityStamp = "eda73ca6-325f-44a1-b662-d3405013b256", ShouldLockout = false, TwoFactorEnabled = false, UnLockedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), UpdatedBy = "superadmin", UpdatedDate = new DateTimeOffset(new DateTime(2018, 7, 8, 5, 7, 12, 571, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)), UserName = "admin" }
                    );
                });

            modelBuilder.Entity("Blue.Data.Models.IdentityModel.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Blue.Data.Models.IdentityModel.UserLogin", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey")
                        .IsRequired();

                    b.HasKey("UserId", "LoginProvider");

                    b.HasAlternateKey("LoginProvider", "ProviderKey");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Blue.Data.Models.IdentityModel.UserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = new Guid("53319368-f467-4d49-a1b0-8da303b6c24a"), RoleId = new Guid("11111111-1111-1111-1111-111111111111") },
                        new { UserId = new Guid("55e816d6-34e1-4a1c-9940-4bc5381b21b8"), RoleId = new Guid("5a61f008-0ce1-4b60-8c0c-c12c721e475d") }
                    );
                });

            modelBuilder.Entity("Blue.Data.Models.IdentityModel.UserToken", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Blue.Data.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caption");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("FileName");

                    b.Property<int>("FileSize");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MediaType");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Blue.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<decimal?>("OldPrice");

                    b.Property<decimal>("Price");

                    b.Property<string>("Sku");

                    b.Property<int?>("SockQuanity");

                    b.Property<decimal?>("SpecialPrice");

                    b.Property<DateTime?>("SpecialPriceEnd");

                    b.Property<DateTime?>("SpecialPriceStart");

                    b.Property<Guid?>("ThumbnailImageId");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ThumbnailImageId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Blue.Data.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CategoryId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFeaturedProduct");

                    b.Property<long>("ProductId");

                    b.Property<Guid?>("ProductId1");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ProductId1");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Blue.Data.Models.ProductMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("MediaId");

                    b.Property<Guid?>("MediaId1");

                    b.Property<long>("ProductId");

                    b.Property<Guid?>("ProductId1");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("MediaId1");

                    b.HasIndex("ProductId1");

                    b.ToTable("ProductMedia");
                });

            modelBuilder.Entity("Blue.Data.Models.IdentityModel.RoleClaim", b =>
                {
                    b.HasOne("Blue.Data.Models.IdentityModel.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blue.Data.Models.IdentityModel.UserClaim", b =>
                {
                    b.HasOne("Blue.Data.Models.IdentityModel.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blue.Data.Models.IdentityModel.UserLogin", b =>
                {
                    b.HasOne("Blue.Data.Models.IdentityModel.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blue.Data.Models.IdentityModel.UserRole", b =>
                {
                    b.HasOne("Blue.Data.Models.IdentityModel.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Blue.Data.Models.IdentityModel.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blue.Data.Models.IdentityModel.UserToken", b =>
                {
                    b.HasOne("Blue.Data.Models.IdentityModel.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blue.Data.Models.Product", b =>
                {
                    b.HasOne("Blue.Data.Models.Media", "ThumbnailImage")
                        .WithMany()
                        .HasForeignKey("ThumbnailImageId");
                });

            modelBuilder.Entity("Blue.Data.Models.ProductCategory", b =>
                {
                    b.HasOne("Blue.Data.Models.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId1");
                });

            modelBuilder.Entity("Blue.Data.Models.ProductMedia", b =>
                {
                    b.HasOne("Blue.Data.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId1");

                    b.HasOne("Blue.Data.Models.Product", "Product")
                        .WithMany("Medias")
                        .HasForeignKey("ProductId1");
                });
#pragma warning restore 612, 618
        }
    }
}
